name: Docker

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME: mitsuba

jobs:
  # Push image to GitHub Packages and Docker Hub.
  push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Log into GitHub Packages
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Log into Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Pull existing image from GitHub Packages (if exists)
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          docker pull $IMAGE_ID:master || true
        continue-on-error: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Build image with cache
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker buildx create --use
          docker buildx build . \
            --file Dockerfile \
            --tag $IMAGE_NAME \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            --load

      - name: Push image to GitHub Packages
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && TAG_VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Always push to master
          [ "${{ github.ref }}" == "refs/heads/master" ] && VERSION=master
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          # Push to the tag version if it's a tag
          if [[ -n "$TAG_VERSION" ]]; then
            docker tag $IMAGE_NAME $IMAGE_ID:$TAG_VERSION
            docker push $IMAGE_ID:$TAG_VERSION
            # Also push to latest
            docker tag $IMAGE_NAME $IMAGE_ID:latest
            docker push $IMAGE_ID:latest
          fi

      - name: Push image to Docker Hub
        run: |
          DOCKERHUB_IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          DOCKERHUB_IMAGE_ID=$(echo $DOCKERHUB_IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && TAG_VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Always push to master
          [ "${{ github.ref }}" == "refs/heads/master" ] && VERSION=master
          docker tag $IMAGE_NAME $DOCKERHUB_IMAGE_ID:$VERSION
          docker push $DOCKERHUB_IMAGE_ID:$VERSION
          # Push to the tag version if it's a tag
          if [[ -n "$TAG_VERSION" ]]; then
            docker tag $IMAGE_NAME $DOCKERHUB_IMAGE_ID:$TAG_VERSION
            docker push $DOCKERHUB_IMAGE_ID:$TAG_VERSION
            # Also push to latest
            docker tag $IMAGE_NAME $DOCKERHUB_IMAGE_ID:latest
            docker push $DOCKERHUB_IMAGE_ID:latest
          fi
